####################################################################################
Le grande list of python novaclient commands
 |  Method resolution order:
 |      Server
 |      novaclient.base.Resource
 |      __builtin__.object
 |
 |  Methods defined here:
 |
 |  __repr__(self)
 |
 |  actions(self)
 |      Actions -- Retrieve server actions.
 |
 |  add_fixed_ip(self, network_id)
 |      Add an IP address on a network.
 |
 |      :param network_id: The ID of the network the IP should be on.
 |
 |  add_floating_ip(self, address)
 |      Add floating IP to an instance
 |
 |      :param address: The ip address or FloatingIP to add to the instance
 |
 |  change_password(self, password)
 |      Update the password for a server.
 |
 |  confirm_resize(self)
 |      Confirm that the resize worked, thus removing the original server.
 |
 |  create(self, name, image, flavor, meta=None, files=None, zone_blob=None, 
 |		reservation_id=None, min_count=None, max_count=None, 
 | 		security_groups=None, userdata=None, key_name=None, 
 |		availability_zone=None, block_device_mapping=None, nics=None, 
 |		**kwargs) 
 |      Create (boot) a new server.
 |
 |      :param name: Something to name the server.
 |      :param image: The :class:`Image` to boot with.
 |      :param flavor: The :class:`Flavor` to boot onto.
 |		:param meta: A dict of arbitrary key/value metadata to store for this
 |               server. A maximum of five entries is allowed, and both
 |               keys and values must be 255 characters or less.
 |   	:param files: A dict of files to overrwrite on the server upon boot.
 |                Keys are file names (i.e. ``/etc/passwd``) and values
 |                are the file contents (either as a string or as a
 |                file-like object). A maximum of five entries is allowed,
 |                and each file must be 10k or less.
 |   	:param zone_blob: a single (encrypted) string which is used internally
 |                by Nova for routing between Zones. Users cannot populate
 |                this field.
 |   	:param userdata: user data to pass to be exposed by the metadata
 |                server this can be a file type object as well or a
 |                string.
 |   	:param reservation_id: a UUID for the set of servers being requested.
 |   	:param key_name: (optional extension) name of previously created
 |                keypair to inject into the instance.
 |   	:param availability_zone: The :class:`Zone`.
 |   	:param block_device_mapping: (optional extension) A dict of block
 |                device mappings for this server.
 |   	:param nics:  (optional extension) an ordered list of nics to be
 |                added to this server, with information about
 |                connected networks, fixed ips, etc.
 |
 |
 |
 |  create_image(self, image_name, metadata)
 |      Create an image based on this server.
 |
 |      :param image_name: The name to assign the newly create image.
 |      :param metadata: Metadata to assign to the image.
 |
 |  delete(self)
 |      Delete (i.e. shut down and delete the image) this server.
 |
 |	delete_meta(self, server, keys)
 |	   	Delete metadata from an server
 |		:param server: The :class:`Server` to add metadata to
 |		:param keys: A list of metadata keys to delete from the server
 |
 |  diagnostics(self)
 |      Diagnostics -- Retrieve server diagnostics.
 |
 |	find(self, **kwargs) method of novaclient.v1_1.servers.ServerManager instance
 |  Find a single item with attributes matching ``**kwargs``.
 |
 |		This isn't very efficient: it loads the entire list then filters on
 |	   	the Python side.
 |
 |	findall(self, **kwargs) method of novaclient.v1_1.servers.ServerManager instance
 |		Find all items with attributes matching ``**kwargs``.
 |
 |		This isn't very efficient: it loads the entire list then filters on
 |		the Python side.
 |	
 |	get(self, server) 
 |  	Get a server.
 |
 |		:param server: ID of the :class:`Server` to get.
 |		:rtype: :class:`Server`
 |
 |  get_console_output(self, length=None)
 |      Get text console log output from Server.
 |
 |      :param length: The number of lines you would like to retrieve (as int)
 |
 |	list(self, detailed=True, search_opts=None) 
 |		Get a list of servers.
 |		Optional detailed returns details server info.
 |		Optional reservation_id only returns instances with that
 |		reservation_id.
 |
 |		:rtype: list of :class:`Server`
 |
 |  migrate(self)
 |      Migrate a server to a new host in the same zone.
 |
 |  pause(self)
 |      Pause -- Pause the running server.
 |
 |  reboot(self, type='SOFT')
 |      Reboot the server.
 |
 |      :param type: either :data:`REBOOT_SOFT` for a software-level reboot,
 |                   or `REBOOT_HARD` for a virtual power cycle hard reboot.
 |
 |  rebuild(self, image, password=None)
 |      Rebuild -- shut down and then re-image -- this server.
 |
 |      :param image: the :class:`Image` (or its ID) to re-image with.
 |      :param password: string to set as password on the rebuilt server.
 |
 |  remove_fixed_ip(self, address)
 |      Remove an IP address.
 |
 |      :param address: The IP address to remove.
 |
 |  remove_floating_ip(self, address)
 |      Add floating IP to an instance
 |
 |      :param address: The ip address or FloatingIP to add to remove
 |
 |  rescue(self)
 |      Rescue -- Rescue the problematic server.
 |
 |  resize(self, flavor)
 |      Resize the server's resources.
 |
 |      :param flavor: the :class:`Flavor` (or its ID) to resize to.
 |
 |      Until a resize event is confirmed with :meth:`confirm_resize`, the old
 |      server will be kept around and you'll be able to roll back to the old
 |      flavor quickly with :meth:`revert_resize`. All resizes are
 |      automatically confirmed after 24 hours.
 |
 |  resume(self)
 |      Resume -- Resume the suspended server.
 |
 |  revert_resize(self)
 |      Revert a previous resize, switching back to the old server.
 |
 |	run_hooks(cls, hook_type, *args, **kwargs)
 |
 |
 |	set_meta(self, server, metadata)
 |		Set a servers metadata
 |		:param server: The :class:`Server` to add metadata to
 |		:param metadata: A dict of metadata to add to the server
 |
 |  suspend(self)
 |      Suspend -- Suspend the running server.
 |
 |  unpause(self)
 |      Unpause -- Unpause the paused server.
 |
 |  unrescue(self)
 |      Unrescue -- Unrescue the rescued server.
 |
 |  update(self, name=None)
 |      Update the name or the password for this server.
 |
 |      :param name: Update the server's name.
 |      :param password: Update the root password.
 |
 | 
 |	uuid_cache(*args, **kwds)
 |		Cache UUIDs for bash autocompletion.
 |
 |	 	The UUID cache works by checking to see whether an ID is UUID-like when
 |		we create a resource object (e.g. a Image or a Server), and if it is,
 |		we add it to a local cache file.  We maintain one cache file per
 |		resource type so that we can refresh them independently.
 |
 |	   A resource listing will clear and repopulate the UUID cache.
 |
 |	   A resource create will append to the UUID cache.
 |
 |	   Delete is not handled because listings are assumed to be performed
 |	   often enough to keep the UUID cache reasonably up-to-date.
 |
 |
 |		write_uuid_to_cache(self, uuid)
 |
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  networks
 |      Generate a simplified list of addresses
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from novaclient.base.Resource:
 |
 |  __eq__(self, other)
 |
 |  __getattr__(self, k)
 |
 |  __init__(self, manager, info, loaded=False)
 |
 |  get(self)
 |
 |  is_loaded(self)
 |
 |  set_loaded(self, val)
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from novaclient.base.Resource:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)


####################################################################################

Vim format command->   :%s/,/,\r/g


'create_image', 
'delete', 
'delete_meta', 
'diagnostics', 
'find', 
'findall', 
'get', 
'get_console_output', 
'list', 
'migrate', 
'pause', 
'reboot', 
'rebuild', 
'remove_fixed_ip', 
'remove_floating_ip', 
'rescue', 
'resize', 
'resource_class', 
'resume', 
'revert_resize', 
'run_hooks', 
'set_meta', 
'suspend', 
'unpause', 
'unrescue', 
'update', 
'uuid_cache', 
'write_uuid_to_cache']



dir(nt)

['__class__', 
'__delattr__', 
'__dict__', 
'__doc__', 
'__format__', 
'__getattribute__', 
'__hash__', 
'__init__', 
'__module__', 
'__new__', 
'__reduce__', 
'__reduce_ex__', 
'__repr__', 
'__setattr__', 
'__sizeof__', 
'__str__', 
'__subclasshook__', 
'__weakref__', 
'authenticate', 
'client', 
'flavors', 
'floating_ip_dns', 
'floating_ip_pools', 
'floating_ips', 
'images', 
'keypairs', 
'limits', 
'quotas', 
'security_group_rules', 
'security_groups', 
'servers', 
'volume_snapshots', 
'volumes', 
'zones']
